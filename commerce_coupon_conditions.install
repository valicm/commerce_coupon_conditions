<?php

/**
 * @file
 * Install file for commerce_coupon_conditions.
 */

use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_install().
 */
function commerce_coupon_conditions_install() {
  $entity_definition_update = \Drupal::entityDefinitionUpdateManager();

  $storage_definition = BaseFieldDefinition::create('commerce_plugin_item:commerce_condition')
    ->setLabel(t('Conditions'))
    ->setCardinality(BaseFieldDefinition::CARDINALITY_UNLIMITED)
    ->setRequired(FALSE)
    ->setDisplayOptions('form', [
      'type' => 'commerce_conditions',
      'weight' => 6,
      'settings' => [
        'entity_types' => ['commerce_order'],
      ],
    ]);
  $entity_definition_update->installFieldStorageDefinition('conditions', 'commerce_promotion_coupon', 'commerce_coupon_conditions', $storage_definition);

  $storage_definition = BaseFieldDefinition::create('list_string')
    ->setLabel(t('Condition operator'))
    ->setDescription(t('The condition operator.'))
    ->setRequired(TRUE)
    ->setSetting('allowed_values', [
      'AND' => t('All conditions must pass'),
      'OR' => t('Only one condition must pass'),
    ])
    ->setDisplayOptions('form', [
      'type' => 'options_buttons',
      'weight' => 7,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDefaultValue('AND');
  $entity_definition_update->installFieldStorageDefinition('condition_operator', 'commerce_promotion_coupon', 'commerce_coupon_conditions', $storage_definition);

  $storage_definition = BaseFieldDefinition::create('datetime')
    ->setLabel(t('Start date'))
    ->setDescription(t('The date the promotion becomes valid.'))
    ->setRequired(FALSE)
    ->setSetting('datetime_type', 'date')
    ->setDisplayOptions('form', [
      'type' => 'datetime_default',
      'weight' => 8,
    ]);
  $entity_definition_update->installFieldStorageDefinition('start_date', 'commerce_promotion_coupon', 'commerce_coupon_conditions', $storage_definition);

  $storage_definition = BaseFieldDefinition::create('datetime')
    ->setLabel(t('End date'))
    ->setDescription(t('The date after which the promotion is invalid.'))
    ->setRequired(FALSE)
    ->setSetting('datetime_type', 'date')
    ->setDisplayOptions('form', [
      'type' => 'commerce_end_date',
      'weight' => 9,
    ]);
  $entity_definition_update->installFieldStorageDefinition('end_date', 'commerce_promotion_coupon', 'commerce_coupon_conditions', $storage_definition);
}

/**
 * Implements hook_uninstall().
 */
function commerce_coupon_conditions_uninstall() {
  $entity_definition_update = \Drupal::entityDefinitionUpdateManager();

  if ($storage_definition = $entity_definition_update->getFieldStorageDefinition('conditions', 'commerce_promotion_coupon')) {
    $entity_definition_update->uninstallFieldStorageDefinition($storage_definition);
  }

  if ($storage_definition = $entity_definition_update->getFieldStorageDefinition('condition_operator', 'commerce_promotion_coupon')) {
    $entity_definition_update->uninstallFieldStorageDefinition($storage_definition);
  }

  if ($storage_definition = $entity_definition_update->getFieldStorageDefinition('start_date', 'commerce_promotion_coupon')) {
    $entity_definition_update->uninstallFieldStorageDefinition($storage_definition);
  }

  if ($storage_definition = $entity_definition_update->getFieldStorageDefinition('end_date', 'commerce_promotion_coupon')) {
    $entity_definition_update->uninstallFieldStorageDefinition($storage_definition);
  }
}
